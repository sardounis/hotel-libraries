!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.geo=e():t.geo=e()}(window,function(){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";var n=o(1),r=n.getRideDistance,i=n.getDistanceFromLatLonInKm;t.exports={getRideDistance:r,getDistanceFromLatLonInKm:i}},function(t,e,o){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r="function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?function(t){return void 0===t?"undefined":n(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":n(t)},i="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(t){return void 0===t?"undefined":r(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":r(t)},u=function(t,e,o,n){var r=f(o-t),i=f(n-e),u=Math.sin(r/2)*Math.sin(r/2)+Math.cos(f(t))*Math.cos(f(o))*Math.sin(i/2)*Math.sin(i/2);return 6371*(2*Math.atan2(Math.sqrt(u),Math.sqrt(1-u)))},f=function(t){return t*(Math.PI/180)};t.exports={getRideDistance:function(t){if(!t||"object"!==(void 0===t?"undefined":i(t)))throw new TypeError("Argument 'rideDetails' for getRideDistance must be an object");var e=[],o=[],n=[],r=[],f=0,a=0;for(var l in t){if(!t[l].latitude)throw Error("Argument 'latitude' must exist");if(!t[l].longitude)throw Error("Argument 'longitude' must exist");if("number"!=typeof t[l].latitude)throw new TypeError("Value of 'latitude' in rideDetails must be a number");if("number"!=typeof t[l].longitude)throw new TypeError("Value of 'longitude' in rideDetails must be a number");if(!(t[l].longitude>=-180&&t[l].longitude<=180&&t[l].latitude>=-90&&t[l].latitude<=90))throw Error("Wrong coordinates in rideDetails");var c=new Date(parseInt(l)).getHours();n.push(t[l].latitude,t[l].longitude),c>=5&&c<24?(o.push(n),r[0]&&r[1]&&(f+=u(n[0],n[1],r[0],r[1]))):(e.push(n),r[0]&&r[1]&&(a+=u(n[0],n[1],r[0],r[1]))),r=n,n=[]}return{distanceSingleKm:f,distanceDoubleKm:a,distanceTotalKm:f+a}},getDistanceFromLatLonInKm:u}}])});
//# sourceMappingURL=index.umd.min.js.map